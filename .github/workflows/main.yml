#---------------------------------------------------------------------
# GitHub Action Workflow to Deploy App to AWS
# Version      Date        Info
# 1.0          2019        Initial Version
#---------------------------------------------------------------------
name: CI-CD-Pipeline-to-AWS
env:
  ECR_REPOSITORY_NAME : "my-application"
  AWS_REGION_NAME           : "eu-central-1"

on: 
  push:
    branches: 
      - master

jobs:
  my_ci_part:
    runs-on: ubuntu-latest

    steps:
    - name: Git clone our repo
      uses: actions/checkout@v1
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id    :  ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key:  ${{ secrets.AWS_SECRET_KEY }}
        aws-region           :  ${{ env.AWS_REGION_NAME }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Print Happy Message for CI finish
      run : echo "CI Pipeline part Finished successfully!"


  # my_cd_part:
  #   runs-on: ubuntu-latest
  #   needs: [my_ci_part]

  #   steps:
  #   - name: Configure my AWS Credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id    :  ${{ secrets.AWS_ACCESS_KEY }}
  #       aws-secret-access-key:  ${{ secrets.AWS_SECRET_KEY }}
  #       aws-region           :  ${{ env.AWS_REGION_NAME }}

  #   - name: Fill in the new image ID in the Amazon ECS task definition
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@v1
  #     with:
  #       task-definition: mytaskdef.json
  #       container-name: cloudblog
  #       image: ${{ steps.build-image.outputs.image }}

  #   - name: Deploy Amazon ECS task definition
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: myapp
  #       cluster: cloudblog
  #       wait-for-service-stability: true
    
  #   - name: Print Happy Message for CD finish
  #     run : echo "CD Pipeline part Finished successfully!"




